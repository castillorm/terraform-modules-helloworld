This repo contains notes and source code when I had completed a how to tutorial for creating Terraform modules.

Link to tutorial:
https://linuxacademy.com/howtoguides/posts/show/topic/12369-how-to-introduction-to-terraform-modules

If you get the error - "Terraform provider.aws: no suitable version installed":
http://pinter.org/archives/5831

Link to "An Introduction to the AWS Command Line Tool":
https://www.linuxfoundation.org/blog/an-introduction-to-the-aws-command-line-tool/

Link to "Deploying a Development Environment in Amazon EC2 Using the AWS Command Line Interface":
https://docs.aws.amazon.com/cli/latest/userguide/tutorial-ec2-ubuntu.html#configure-cli-launch-ec2

Update #1:
Looks like I need to know details about our default VPC in AWS - like the subnet ID and AWS region ID.

Consequently, I am going to install the AWS CLI on Macbook to try to get that.  Spent some time going thru the AWS Console, but it looks like there is one CLI command that give will it to me.

Installing the AWS CLI is a multi-step process which includes instaling Python 3.

Tutorial for installing the AWS CLI --> https://docs.aws.amazon.com/cli/latest/userguide/cli-install-macos.html

Update #2:
Created the Terraform module.  Couple of gotchas:
- You have to know the AWS region and the subnet ID

Now on to creating the main project that references the Terraform module

f you run the terraform validate command and run into this error:

* provider.aws: no suitable version installed
  version requirements: "(any version)"
  versions installed: none

Then you should run the terraform init command

One other thing that I found is that you first create the module (reusable components) in a separate directory. Run terraform init, then terraform validate.

Next, you create the project files that will reuse the module(s). Run terraform init, then terraform get (in order to pull the modules into your project), finally terraform validate.  At that point, you can run terraform apply to execute the build / deploy.

Here is the terminal / console output when I ran the example:
module.balancer1.aws_elb.mybalancer: Creation complete after 4s (ID: Balancer1)

Apply complete! Resources: 2 added, 0 changed, 0 destroyed.
Rods-MacBook-Air:test-hello-tf-module-project castillorm$ terraform destroy
aws_security_group.ForBalancer: Refreshing state... (ID: sg-7cc4b503)
aws_elb.mybalancer: Refreshing state... (ID: Balancer1)

An execution plan has been generated and is shown below.
Resource actions are indicated with the following symbols:
  - destroy

Terraform will perform the following actions:

  - aws_security_group.ForBalancer

  - module.balancer1.aws_elb.mybalancer


Plan: 0 to add, 0 to change, 2 to destroy.

Do you really want to destroy?
  Terraform will destroy all your managed infrastructure, as shown above.
  There is no undo. Only 'yes' will be accepted to confirm.

  Enter a value: yes

module.balancer1.aws_elb.mybalancer: Destroying... (ID: Balancer1)
module.balancer1.aws_elb.mybalancer: Still destroying... (ID: Balancer1, 10s elapsed)
module.balancer1.aws_elb.mybalancer: Still destroying... (ID: Balancer1, 20s elapsed)
module.balancer1.aws_elb.mybalancer: Still destroying... (ID: Balancer1, 30s elapsed)
module.balancer1.aws_elb.mybalancer: Destruction complete after 36s
aws_security_group.ForBalancer: Destroying... (ID: sg-7cc4b503)
aws_security_group.ForBalancer: Destruction complete after 1s

Destroy complete! Resources: 2 destroyed.
Rods-MacBook-Air:test-hello-tf-module-project castillorm$
